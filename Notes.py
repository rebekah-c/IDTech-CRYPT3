# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hi0Kpf2peay7nz3vsVtuN-CeFjVm-rGw

A **list** is a data type that holds a collection of values (strings, ints, floats, etc.)

list_of_numbers = [0, 4, 5]

list_of_strings = ["Blue feather"]

Indexes always start a 0

Every list has a built-in sort method
"""

list_of_numbers = [0, 4, 5, 9, 7, 8, 1, 2, 6, 3]
list_of_strings = ["Blue feather", "Yellow feather", "Orange feather", "Gray feather"]
list_of_numbers.sort()
print(list_of_numbers)
list_of_strings.sort()
print(list_of_strings)

list_of_numbers.append(15)
print(list_of_numbers)
list_of_numbers.insert(4, 8)
print(list_of_numbers)

list_of_strings.pop()
print(list_of_strings)

list_of_strings.remove("Orange feather")
print(list_of_strings)

"""**Variables** are like boxes and can hold different data types."""

donuts_box = 36
print ("text " + str(donuts_box))

"""Input and output: data types

Cast something to another data type: use parantheses (int) (str)

If-else statements are conditional

for x in range(starting_number, ending_number)

To name variables: use underscores
"""

guess = False
while not guess:
  my_number = int(input("Pick a number: "))
  if my_number == 14:
    guess = True
print("You win!")

"""Include first index but not last index

Spaces count

print(my_string[4:12])

**Substrings**

A substring is just a portion of another existing string.

  string[indexOne:indexTwo]

If indexOne or indexTwo are left out, substring will either begin with index 0 or end with last available index respectively.

While loops
- Use while loops when a program must run an unknown amount of times
- While loops are made of:
  - Loop control variable (made first)
  - Conditional statement (conditions must be met for loop to run)
  - Loop body (actual code)
"""

my_string = "you have the answer"
print(my_string[:])

A = 0b1101
B = 0b1010
C = bin(A & B)
print(C)

D = A | B
print(bin(D))

E = ~A
print(bin(E))

F = A ^ B
print(bin(F))

G = A << 1
print(bin(G))
print(bin(A))

H = A >> 2
print(bin(H))

"""Append

Insert

Pop

Remove

**Logic Gates**: And (&), Or (|), Not (~)
"""

F = 1^1
print(F)

F = 0^1
print(F)
